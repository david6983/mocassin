package com.david.mocassin.model.c_components.c_struct

import com.david.mocassin.model.c_components.CtypeEnum
import com.david.mocassin.model.c_components.CuserType
import com.david.mocassin.model.c_components.c_variable.Cvariable
import com.david.mocassin.utils.isNameSyntaxFollowCstandard
import freemarker.template.Configuration
import freemarker.template.Template
import javafx.beans.property.SimpleBooleanProperty
import javafx.beans.property.SimpleListProperty
import javafx.beans.property.SimpleStringProperty
import javafx.collections.ObservableList
import java.io.File
import java.io.FileWriter

import tornadofx.*
import javax.json.Json
import javax.json.JsonArrayBuilder
import javax.json.JsonObject

class CuserStructure(name: String) : CuserType, JsonModel {
    val nameProperty = SimpleStringProperty(name)
    var name by nameProperty

    val isDisplayFunctionGeneratedProperty = SimpleBooleanProperty(false)
    var isDisplayFunctionGenerated by isDisplayFunctionGeneratedProperty

    val attributesProperty = SimpleListProperty<Cvariable>(mutableListOf<Cvariable>().asObservable())
    var attributes: ObservableList<Cvariable> by attributesProperty

    fun add(value: Cvariable) = attributes.add(value)

    fun remove(value: Cvariable) = attributes.remove(value)

    fun removeAll() = attributes.clear()

    fun set(index: Int, value: Cvariable) = attributes.set(index, value)

    fun toJson(): String {
        val stringBuilder = StringBuilder("{")
        for ((index, attr) in attributes.withIndex()) {
            stringBuilder.append("\"$index\": " + attr.toJson() + ",")
        }
        stringBuilder.deleteCharAt(stringBuilder.length - 1)
        stringBuilder.append("}")
        return stringBuilder.toString()
    }

    fun attributesToDeclarationString(): String {
        val out = StringBuilder()
        val firstLetter = name.first().toLowerCase()
        for (attr in attributes) {
            out.append("\t$firstLetter.${attr.name} = ${attr.name};\n")
        }
        out.deleteCharAt(out.length - 1)
        return out.toString();
    }

    fun attributesToString(isParameters: Boolean = false): String {
        val out = StringBuilder()
        for (attr in attributes) {
            if (!isParameters) {
                out.append("\t")
            }
            out.append(attr.toString())
            if (isParameters) {
                out.append(", ")
            } else {
                out.append(";\n")
            }
        }
        if (isParameters) {
            out.delete(out.length - 2, out.length)
        }
        return out.toString()
    }

    fun getAllComparableAttribute(): List<String> {
        val out = mutableListOf<String>()
        for (attr in attributes) {
            if (attr.isComparable) {
                out.add(attr.name)
            }
        }
        return out
    }

    fun toCimplementation(config: Configuration, folderPath: String = "out/", packageName: String) {
        var temp: Template? = null
        temp = config.getTemplate("object.ftlh")
        val fileWriter = FileWriter(File("$folderPath/${packageName}_$name.c"));
        val model = mutableMapOf(Pair("object", this))
        //TODO use polymorphism ?
        model.put("project_name",
            CuserStructure(packageName)
        )
        temp!!.process(model, fileWriter);
        fileWriter.close();
    }

    fun isAttributeUniqueInStructure(name: String): Boolean {
        return if (isNameSyntaxFollowCstandard(name)) {
            attributes.indexOfFirst { it.name == name } == -1
        } else {
            false
        }
    }

    private fun variablesToJSON(): JsonArrayBuilder {
        val out = Json.createArrayBuilder()

        for(attr in attributes) {
            out.add(attr.toJSON())
        }

        return out
    }

    override fun toJSON(json: JsonBuilder) {
        with(json) {
            add("name", name)
            add("isDisplayFunctionGenerated", isDisplayFunctionGenerated)
            add("variables", variablesToJSON())
        }
    }

    override fun updateModel(json: JsonObject) {
        with(json) {
            name = string("name")
            isDisplayFunctionGenerated = boolean("isDisplayFunctionGenerated")!!
            getJsonArray("variables")?.forEach { variable ->
                val v = Cvariable("", CtypeEnum.INT, isPointer = false, isComparable = false)
                v.updateModel(variable as JsonObject)
                attributes.add(v)
            }
        }
    }
}

